name: Release python

on:
  push:
    tags:
      - 'python-test/ytsaurus-airflow-provider/[0-9]+.[0-9]+.*'
      - 'python/ytsaurus-airflow-provider/[0-9]+.[0-9]+.*'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.tag.outputs.RELEASE_TYPE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse tag
        id: tag
        run: |
          tmp=${GITHUB_REF#refs/*/}; if [[ "${tmp%%/*}" == "python-test" ]]
          then
              echo "RELEASE_TYPE=test" >> $GITHUB_OUTPUT
          elif [[ "${tmp%%/*}" == "python" ]]
          then
              echo "RELEASE_TYPE=prod" >> $GITHUB_OUTPUT
          fi
          echo "RELEASE_VERSION=$(echo ${GITHUB_REF#refs/*/python*/*/})" >> $GITHUB_OUTPUT
          echo "PACKAGE_NAME=$(tmp=${GITHUB_REF#refs/*/python*/}; echo ${tmp%%/*})" >> $GITHUB_OUTPUT

      - name: Check if tag is valid
        run: |
          export RELEASE_TYPE=${{ steps.tag.outputs.RELEASE_TYPE }}
          export RELEASE_VERSION=${{ steps.tag.outputs.RELEASE_VERSION }}
          export PACKAGE_NAME=${{ steps.tag.outputs.PACKAGE_NAME }}

          if [[ -z "$RELEASE_TYPE" || -z "$RELEASE_VERSION" || -z "$PACKAGE_NAME" ]]
          then
              echo "Invalid tag"
              exit 1
          fi

          if [[ "$RELEASE_TYPE" != "test" && "$RELEASE_TYPE" != "prod" ]]
          then
              echo "Invalid release type"
              exit 1
          fi

          if ! [[ "$RELEASE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9a-zA-Z]+$ ]]
          then
              echo "Invalid version"
              exit 1
          fi

          # Check if version in ytsaurus_airflow_provider/__init__.py has same prefix as version from tag (e.g. 1.2.0 and 1.2.1 are valid, 1.2.0 and 1.3.0 are not)
          VERSION_FILE="ytsaurus_airflow_provider/__init__.py"
          REPO_VERSION=$(grep "^__version__ = " $VERSION_FILE | cut -d" " -f3 | tr -d "\"")

          if [[ "${RELEASE_VERSION%.*}" != "${REPO_VERSION%.*}" ]]
          then
              echo "Version in tag and version in $VERSION_FILE do not have the same prefix. You need to bump the version in $VERSION_FILE file."
              exit 1
          fi

          # Update ytsaurus_airflow_provider/__init__.py with new version
          sed -i "s/^__version__ = .*/__version__ = \"$RELEASE_VERSION\"/" $VERSION_FILE

          # Check if version in ytsaurus_airflow_provider/__init__.py is the same as version from tag
          REPO_VERSION=$(grep "^__version__ = " $VERSION_FILE | cut -d" " -f3 | tr -d "\"")

          if [[ "$RELEASE_VERSION" != "$REPO_VERSION" ]]
          then
              echo "Version in tag and version in $VERSION_FILE do not match. For some reason, the version in $VERSION_FILE was not updated."
              exit 1
          fi

      - uses: actions/setup-python@v5
        with:
          python-version: "3.8"
      
      - name: Build
        run: |
          python -m pip install build
          python -m build
          # files saved to dist/

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/
          retention-days: 1

  test_release:
    name: Run release TestPyPi
    needs:
      - build
    if: ${{ needs.build.outputs.release_type == 'test' }}
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          packages-dir: dist/

  prod_release:
    name: Run release PyPi
    needs:
      - build
    if: ${{ needs.build.outputs.release_type == 'prod' }}
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/
